Checklist

●객체지향 프로그래밍은 무엇일까요?
     객체 지향 프로그래밍은 컴퓨터 프로그래밍의 패러다임 중 하나이다. 객체 지향 프로그래밍은 컴퓨터 프로그램을  
     명령어의 목록으로 보는 시각에서 벗어나 여러 개의 독립된 단위, 즉 "객체"들의 모임으로 파악하고자 하는 것이다.

 	객체 지향 프로그래밍은 프로그램을 유연하고 변경이 쉽게 만들기 때문에 대규모 소프트웨어 개발에 많이 사용된다. 
	또한 프로그래밍을 더 배우기 쉽게 하고 소프트웨어 개발과 보수를 간편하게 하며, 보다 직관적인 코드 분석을 가능하게 하는 장점이 있다. 
	그러나 지나친 프로그램의 객체화 경향은 실제 세계의 모습을 그대로 반영하지 못한다는 비판을 받기도 한다.

○ #로 시작하는 프라이빗 필드는 왜 필요한 것일까요? 정보를 은폐(encapsulation)하면 어떤 장점이 있을까요?
     -외부에서 객체접근하는데 있어서 정보를 숨기고, 객체의 연산을 통해서만 접근이 가능하게 한다.
     -외부에서 특정 객체의 데이터 및 함수를 직접 접근을 막음으로써 변경을 못하게 하고 유지보수나 확장시 오류의 범위를
      최소화 할 수 있고, 객체내 정보손상, 오용을 방지등을 할 수 있다

○ 다형성이란 무엇일까요? 다형성은 어떻게 코드 구조의 정리를 도와주나요?
      - 하나의 클래스가 다양한 형태와 동작방식을 가질 수 있다는 개념으로, 동일한 prototype임에도 실행결과가 다른 다양한 객체로써 활용할 수 있다는 의미이다.
      - 주로 상속을 통해 클래스를 확장해가는 것으로 이해하면 되며, 클래스의 속성이나 동작방식을 넓혀가는 것을 의미한다.

○ 상속이란 무엇인가요? 상속을 할 때의 장점과 단점은 무엇인가요?
     - 쉽게 말하면 class 확장, 모든 class는 다른 class의 속성과 행동을 유지한채 종속적인 관계의 class를 생성할 수 있다.
     - 객체는 기본적으로 독립적이어야 하며, application은 이러한 독립적인 객체들의 기능이 긴밀하게 모여 이루어진 문서이자 집합체이다.
     - 상속은 보통 기존의 class에서 속성과 기능을 추가할때 활용되는 개념으로, 추가기능이 많아진다면 코드 나 용량 측면에서 과부하가 이루어진다(클래스 폭발).
     - 이와 같이 부모 class(prototype)의 속성과 행동을 그대로 유지하여 확장받는 상속의 특성상, 이러한 객체지향 프로그래밍의 기조를 유지하기는 매우 힘들다.

○ OOP의 합성(Composition)이란 무엇인가요? 합성이 상속에 비해 가지는 장점은 무엇일까요?
     - 이러한 상속의 단점을 보완하면서 코드 재사용을 가능하도록 해주는 기능이 합성(Composition)이다.
     - 상속의 경우 부모 class에 대한 외부 생성자를 생성한 후 별도의 접근이 필요하지만, 합성을 할 경우엔 부모/자식 class 상관없이 한 줄의 코드로 직접적인 접근이 가능해진다.
     - 상속의 경우 컴파일 단계에서 관계가 고정되어 런타임 시점에서 class간 속성 및 관계를 변화시킬 수 없다.
     - 합성은 이러한 단점을 보완하여, 런타임 시점에서 class 관계를 변화시킬 수 있다.

● 자바스크립트의 클래스는 어떻게 정의할까요?
     - class가 없던 Javascript는 객체를 생성할 때 별도의 내부 생성자없이 바로 객체를 생성하였고, 이에 따른 속성이나 행동 값들을 부여해주었다.
     - ES6이후 생긴 class에서는 constructor 생성자를 통해 정의해줄 수 있고, 외부 생성자인 new를 통해 class를 생성하거나 상속받을 수 있다.

○ 프로토타입 기반의 객체지향 프로그래밍은 무엇일까요?
     프로토파입 기반 프로그래밍은 객체지향 프로그래밍의 한 형태의 갈래로, 클래스가 없고, 클래스 기반 언어에서 상속을 사용하는 것과는 다르게
     객체를 원형으로 하여 복제의 과정을 통하여 객체의 동작 방식을 다시 사용할 수 있다. 프로토타입기반 프로그래밍은 클래스리스 프로토타입 지향
     혹은 인스턴스 기반 프로그래밍이라고도 한다.
	
○ 자바스크립트의 클래스는 이전의 프로토타입 기반의 객체지향 구현과 어떤 관계를 가지고 있나요?
     새로운 클래스에서 가존 클래스의 모든 프로퍼티와 메소드를 사용할 수 있는 상속과,
     객체 생성자 함수를 작성하고 new 연산자를 사용해 객체 생성하고, 메소드를 추가할 수 있다